"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[8140],{25056:(e,t,i)=>{i.r(t),i.d(t,{default:()=>d});var a=i(68152);const r={href:"http://en.wikiversity.org/wiki/Open_Source_ERP",target:"_blank",rel:"noopener noreferrer"},l={href:"http://en.wikiversity.org/wiki/Adempiere_Technical_Training",target:"_blank",rel:"noopener noreferrer"},s={href:"http://www.adempiere.com/wiki/",target:"_blank",rel:"noopener noreferrer"},n=(0,a.IL)('<h2 id="extension-architecture" tabindex="-1"><a class="header-anchor" href="#extension-architecture" aria-hidden="true">#</a> Extension architecture</h2><ul><li>Callouts</li><li>Model Validator</li><li>Java Triggers</li><li>Processes</li><li>Views and Reports</li><li>Forms</li><li>Print Formats</li><li>Import File Loader</li></ul><h2 id="common-code" tabindex="-1"><a class="header-anchor" href="#common-code" aria-hidden="true">#</a> Common code</h2><h3 id="context-variables" tabindex="-1"><a class="header-anchor" href="#context-variables" aria-hidden="true">#</a> Context variables</h3><p>Context variables are like &#39;global&#39; variables for the whole Adempiere, or for a specific window or tab.</p><p>You can see all context variables in Tools -&gt; Preference -&gt; Context</p><p>Context variables starting with # are defined at login level</p><p>Every field in a window has his own context variable, you can access it programatically.</p><p>Reading context variable AD_Role_ID</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>int currole_id = Env.getContextAsInt(ctx, &quot;#AD_Role_ID&quot;);\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="creating-object-new-record-update-record-delete-record" tabindex="-1"><a class="header-anchor" href="#creating-object-new-record-update-record-delete-record" aria-hidden="true">#</a> Creating object (new record, update record, delete record)</h3><p>You can get or create objects from the database using the model classes, for example to read an invoice from the database:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>MInvoice inv = new MInvoice(getCtx(), invoice_id, get_TrxName());\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>This is equivalent to issue a &#39;SELECT * FROM C_Invoice&#39; and load in memory the data.</p><p>To create a new record in the database you call the same code with zero as the ID:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>MInvoice inv = new MInvoice(getCtx(), 0, get_TrxName());\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>You then can make changes to columns using the setter methods of the object, i.e.:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>inv.setC_Currency_ID(100);\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>After you make all the changes you save the record in the database calling the method save():</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>inv.save();\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>The method save will execute an INSERT if is a new record or an UPDATE if the record already exists. If you want to delete an existing record, you can call the method delete(), i.e.</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>inv.delete(true);\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>and after deleting you need to call the method save to execute the corresponding DELETE in the database</p><h3 id="use-messages-for-translations" tabindex="-1"><a class="header-anchor" href="#use-messages-for-translations" aria-hidden="true">#</a> Use messages for translations</h3><p>To show messages within your programs, please use the i18n facility of Adempiere using the message table for this purpose, programatically you simply execute, i.e.:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>String dateLabel = Msg.getMsg(Env.getCtx(), &quot;Date&quot;);\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="sql" tabindex="-1"><a class="header-anchor" href="#sql" aria-hidden="true">#</a> SQL</h3><ul><li>Usage of embedded SQL – recommended to use UpperCase in SQL Keywords (for security sql parser) <ul><li>Specially this keywords: SELECT, FROM, WHERE, ON, AS, INNER, JOIN, LEFT, OUTER, FULL</li></ul></li><li>When using joins, security parser also requires that ON clause defining the joining columns must be enclosed in parenthesis</li><li>use Oracle SQL standard syntax that can be translated to postgres – Don&#39;t use postgres specific syntax</li></ul><p>If you want to issue a simple query returning just one column of the first record, you can use the DB.getSQLValue functions provided by Adempiere:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>String sql = &quot;SELECT COUNT(*) FROM C_Recurring_Run WHERE C_Recurring_ID=?&quot;;\nint current = DB.getSQLValue(get_TrxName(), sql, getC_Recurring_ID());\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>To execute a DML operation in the database (INSERT, DELETE or UPDATE) you can use the DB.executeUpdate method, i.e.:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>String sql = &quot;UPDATE C_CashLine SET Processed=&#39;N&#39; WHERE C_Cash_ID=&quot; + getC_Cash_ID();\nint noLine = DB.executeUpdate (sql, get_TrxName());\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>To read several records from the database (cursor) you can execute</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>String sql = &quot;SELECT C_PaymentAllocate_ID FROM C_PaymentAllocate WHERE C_Payment_ID = ?&quot;;\nPreparedStatement pstmt = null;\npstmt = DB.prepareStatement(sql, get_TrxName());\npstmt.setInt(1, payment_ID);\nResultSet rs = pstmt.executeQuery();\nwhile (rs.next()) {\n   payment_allocate_ID = rs.getInt(1);\n   /// ... more code\n}\nrs.close();\npstmt.close();\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="commit-not-common-–-used-with-transactions" tabindex="-1"><a class="header-anchor" href="#commit-not-common-–-used-with-transactions" aria-hidden="true">#</a> Commit (not common – used with transactions)</h3><p>Normally you don&#39;t need to execute directly a commit. If in your process you need strict control of the commit, please create a transaction:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Trx trx = Trx.get(getTrxName(ctx), true);\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>trx.commit()\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="callouts" tabindex="-1"><a class="header-anchor" href="#callouts" aria-hidden="true">#</a> Callouts</h2><p>Called after user entered value (for Strings is called every keystroke)</p><p>It can be used for direct data validation – but you need to validate again before saving</p><p>Better usage for data consequences: i.e. Filling other fields with lookup values, calculating totals You must repeat all calculations in persistence layer</p><p>You can have multiple callouts separated by ;</p><p>The processing of a callout must be quick (&lt; 1 sec), if slow better create a button and process</p><p>Callout classes must extend CalloutEngine and implement the callout methods with 6 variables (last optional)</p><ul><li>Context</li><li>Window No</li><li>Model Tab</li><li>Model Field</li><li>The new value</li><li>The old value</li><li>&#39;Returns&#39; error message</li></ul><p>There are also callouts for translation of strings on Import File Loader, these callouts have just one parameter:</p><ul><li>The value</li><li>&#39;Returns&#39; the translated value</li></ul><p><strong><em>Exercise: Create a Callout on the Name of Product Category – the name must be passed to the Description in upper case</em></strong></p><h2 id="model-classes-lookup" tabindex="-1"><a class="header-anchor" href="#model-classes-lookup" aria-hidden="true">#</a> Model Classes (lookup)</h2><p>Persistence</p><p>PO (Persistent Object) --&gt; X_<code>&lt;table&gt;</code> classes --&gt; M<code>&lt;shortTable&gt;</code></p><p>Class X_ is looked up with complete Name (and case) of the table</p><p>Class M is looked up with table name without prefix (if prefix is &lt;= 2 char), and without underscore symbols “_”</p><p>Precedence when looking up for M classes:</p><ol><li>Look for model package of the entity type (for non-dictionary tables) – first look for M and then X_</li><li>look for model package in:</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>org.compiere.model\norg.compiere.wf\norg.compiere.print\norg.compiere.impexp\ncompiere.model\nadempiere.model\norg.adempiere.model\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li>look for adempiere.model.X_ class</li><li>look for compiere.model.X_ class</li><li>look for org.compiere.model.X_ class</li></ol><p>Exceptions:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>AD_Element - M_Element\nAD_Registration – M_Registration\nAD_Tree – MTree_Base\nR_Category – MRequestCategory\nGL_Category – MGLCategory\nK_Category – MKCategory\nC_ValidCombination – MAccount\nC_Phase – MProjectTypePhase\nC_Task – MProjectTypeTask\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>If can&#39;t find persistence class then it uses PO to save directly to the database. In Adempiere there is a GenericPO that can be used for programatically save tables with no model class.</p><p>X_ classes are generated automatically – don&#39;t change them Usage of GenerateModel: arguments:</p><ul><li>Output Directory - C:\\srcAdempiere\\trunk\\base\\src\\org\\compiere\\model\\</li><li>Package - org.compiere.model</li><li>EntityType - &#39;D&#39;</li><li>Optional table like - &#39;U_RoleMenu&#39;</li></ul><h2 id="model-classes-triggers" tabindex="-1"><a class="header-anchor" href="#model-classes-triggers" aria-hidden="true">#</a> Model Classes (triggers)</h2><p>Insert/Update triggers: beforeSave and afterSave</p><p>Delete triggers: beforeDelete and afterDelete</p><h2 id="model-validator" tabindex="-1"><a class="header-anchor" href="#model-validator" aria-hidden="true">#</a> Model validator</h2><p>Defined at client level</p><p>You can have multiple model validators separated by ;</p><p>Events:</p><ul><li>User Login – you know the user, role, client and organization – i.e. Useful for veto login</li></ul><p>Events on table:</p><ul><li>BEFORE/AFTER</li><li>NEW/ CHANGE/ DELETE</li></ul><p>Events on documents:</p><ul><li>BEFORE/AFTER</li><li>PREPARE/ VOID/ CLOSE/ REACTIVATE/ REVERSECORRECT/ REVERSEACCRUAL/ COMPLETE / POST</li></ul><h2 id="model-classes-vs-validators" tabindex="-1"><a class="header-anchor" href="#model-classes-vs-validators" aria-hidden="true">#</a> Model Classes vs Validators</h2><ul><li>Don&#39;t customize adempiere model classes – implement triggers for official tables in model validator</li><li>Use model classes (or model validator if preferred) for your customized tables</li><li>Don&#39;t generate X_ classes for official adempiere tables – use general getter and setter from PO for custom columns</li></ul><p><strong><em>Exercises:</em></strong></p><ul><li>Create a ModelValidator that avoids users login twice in Adempiere</li><li>Create a ModelValidator when Order changes the business partner – add the previous bp to the description</li><li>Create a ModelValidator to forbid GardenAdmin from completing an Invoice</li><li>Create a ModelValidator to prevent complete posting from invoices</li></ul><h2 id="processes" tabindex="-1"><a class="header-anchor" href="#processes" aria-hidden="true">#</a> Processes</h2><p>Called from menu or buttons prepare method for getting the parameters into variables – Record_ID just work for buttons</p><p>doIt method for execution of the process</p><p>addLog to keep log of the executions / for auditing purposes and showed at the end of the process</p><p>return a message</p><p>for errors must throw exceptions</p><h2 id="forms" tabindex="-1"><a class="header-anchor" href="#forms" aria-hidden="true">#</a> Forms</h2><p>Custom swing windows – special cases Not recommended – not supported for webUI clients</p><ul><li>Extend org.compiere.swing.CPanel</li><li>Swing code – implement listeners</li><li>Use javax.swing and org.compiere.swing components</li></ul><h2 id="import-file-loader" tabindex="-1"><a class="header-anchor" href="#import-file-loader" aria-hidden="true">#</a> Import File Loader</h2><ul><li>Stage table</li><li>File definition</li><li>Import of the file</li><li>Import process to transfer data from the stage table to the definitive tables</li></ul><p><strong><em>Exercise:</em></strong></p><ul><li>Add POReference column to the I_Invoice stage table</li><li>Change the ImportInvoice process to manage the import of this new column</li></ul><h2 id="other-resource" tabindex="-1"><a class="header-anchor" href="#other-resource" aria-hidden="true">#</a> Other resource</h2><p><a href="a">ADempiere Wiki on New Window Creation</a></p>',94),o={},d=(0,i(42272).c)(o,[["render",function(e,t){const i=(0,a.E1)("ExternalLinkIcon");return(0,a.Wz)(),(0,a.An)("div",null,[(0,a.QD)("p",null,[(0,a.mY)("The great thing about "),(0,a.QD)("a",r,[(0,a.mY)("Open Source ERP"),(0,a.K2)(i)]),(0,a.mY)(" is that you can extend it. This is part of the overall course on "),(0,a.QD)("a",l,[(0,a.mY)("Adempiere Technical Training"),(0,a.K2)(i)]),(0,a.mY)(". Note that the spelling for ADempiere in the title is proper as it is defined "),(0,a.QD)("a",s,[(0,a.mY)("here"),(0,a.K2)(i)]),(0,a.mY)(".")]),n])}]])},83896:(e,t,i)=>{i.r(t),i.d(t,{data:()=>a});const a=JSON.parse('{"key":"v-3cefd9fe","path":"/community/wiki/developers-guide/extending-adempiere.html","title":"Extending ADempiere","lang":"en-US","frontmatter":{"title":"Extending ADempiere","category":"Community","star":9,"sticky":9,"tag":["Wiki","Developer\'s Guide"],"article":false,"description":"The great thing about Open Source ERP is that you can extend it. This is part of the overall course on Adempiere Technical Training. Note that the spelling for ADempiere in the title is proper as it is defined here.","head":[["meta",{"property":"og:url","content":"https://github.com/adempiere/adempiere-site.github.io/community/wiki/developers-guide/extending-adempiere.html"}],["meta",{"property":"og:title","content":"Extending ADempiere"}],["meta",{"property":"og:description","content":"The great thing about Open Source ERP is that you can extend it. This is part of the overall course on Adempiere Technical Training. Note that the spelling for ADempiere in the title is proper as it is defined here."}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-08-21T19:56:54.000Z"}],["meta",{"property":"article:author","content":"ADempiere"}],["meta",{"property":"article:tag","content":"Wiki"}],["meta",{"property":"article:tag","content":"Developer\'s Guide"}],["meta",{"property":"article:modified_time","content":"2023-08-21T19:56:54.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"Extending ADempiere\\",\\"description\\":\\"The great thing about Open Source ERP is that you can extend it. This is part of the overall course on Adempiere Technical Training. Note that the spelling for ADempiere in the title is proper as it is defined here.\\"}"],["link",{"rel":"alternate","type":"application/atom+xml","href":"https://github.com/adempiere/adempiere-site.github.io/atom.xml","title":" Atom Feed"}],["link",{"rel":"alternate","type":"application/json","href":"https://github.com/adempiere/adempiere-site.github.io/feed.json","title":" JSON Feed"}],["link",{"rel":"alternate","type":"application/rss+xml","href":"https://github.com/adempiere/adempiere-site.github.io/rss.xml","title":" RSS Feed"}]]},"headers":[{"level":2,"title":"Extension architecture","slug":"extension-architecture","link":"#extension-architecture","children":[]},{"level":2,"title":"Common code","slug":"common-code","link":"#common-code","children":[{"level":3,"title":"Context variables","slug":"context-variables","link":"#context-variables","children":[]},{"level":3,"title":"Creating object (new record, update record, delete record)","slug":"creating-object-new-record-update-record-delete-record","link":"#creating-object-new-record-update-record-delete-record","children":[]},{"level":3,"title":"Use messages for translations","slug":"use-messages-for-translations","link":"#use-messages-for-translations","children":[]},{"level":3,"title":"SQL","slug":"sql","link":"#sql","children":[]},{"level":3,"title":"Commit (not common – used with transactions)","slug":"commit-not-common-–-used-with-transactions","link":"#commit-not-common-–-used-with-transactions","children":[]}]},{"level":2,"title":"Callouts","slug":"callouts","link":"#callouts","children":[]},{"level":2,"title":"Model Classes (lookup)","slug":"model-classes-lookup","link":"#model-classes-lookup","children":[]},{"level":2,"title":"Model Classes (triggers)","slug":"model-classes-triggers","link":"#model-classes-triggers","children":[]},{"level":2,"title":"Model validator","slug":"model-validator","link":"#model-validator","children":[]},{"level":2,"title":"Model Classes vs Validators","slug":"model-classes-vs-validators","link":"#model-classes-vs-validators","children":[]},{"level":2,"title":"Processes","slug":"processes","link":"#processes","children":[]},{"level":2,"title":"Forms","slug":"forms","link":"#forms","children":[]},{"level":2,"title":"Import File Loader","slug":"import-file-loader","link":"#import-file-loader","children":[]},{"level":2,"title":"Other resource","slug":"other-resource","link":"#other-resource","children":[]}],"git":{"createdTime":1692647814000,"updatedTime":1692647814000,"contributors":[{"name":"Jesús Albujas","email":"134967453+tecnicoerp@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":3.97,"words":1191},"filePathRelative":"community/wiki/developers-guide/extending-adempiere.md","localizedDate":"August 21, 2023","excerpt":"<p>The great thing about <a href=\\"http://en.wikiversity.org/wiki/Open_Source_ERP\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Open Source ERP</a> is that you can extend it. This is part of the overall course on <a href=\\"http://en.wikiversity.org/wiki/Adempiere_Technical_Training\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Adempiere Technical Training</a>.\\nNote that the spelling for ADempiere in the title is proper as it is defined <a href=\\"http://www.adempiere.com/wiki/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">here</a>.</p>","autoDesc":true}')}}]);