"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[4040],{52404:(e,i,n)=>{n.r(i),n.d(i,{default:()=>u});var t=n(68152);const l={href:"https://wiki.adempiere.net/User:Milos_t",target:"_blank",rel:"noopener noreferrer"},a=(0,t.IL)('<p>Price Calculation is a mandatory document in Serbia for receiving goods. It must display landing cost allocation per product, VAT amount, rate, price margin, vendor price and our price in tabular format.</p><p>First script is a callout, which refreshes calculated fields, after changing values.</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>/**\n * Script Callout for MLSR_PriceCalculationLine\n * \n * Search Key: groovy:CallOutPriceCalculationLine\n * Name: CallOutPriceCalculationLine\n * Description: Calculate amount when some field is changed\n * \n * Comment/Help: \n * \n * Event type: Callout\n * Rule type: JSR 223 Scripting APIs\n * \n * @author Milos Tijanic\n */\n\nimport rs.adempiere.model.MLSRPriceCalculationLine\n\nMLSRPriceCalculationLine calcLine = new MLSRPriceCalculationLine(A_Ctx, 0, null)\n\ncalcLine.setT_Qty(A_Tab.getValue(&quot;T_Qty&quot;))\ncalcLine.setPriceVendor(A_Tab.getValue(&quot;PriceVendor&quot;))\ncalcLine.setSellingPrice(A_Tab.getValue(&quot;SellingPrice&quot;))\ncalcLine.setC_Tax_ID(A_Tab.getValue(&quot;C_Tax_ID&quot;))\ncalcLine.setLandAmt(A_Tab.getValue(&quot;LandAmt&quot;))\n\ncalcLine.calculateAmounts()\n\nA_Tab.setValue(&quot;LineVendorAmt&quot;, calcLine.getLineVendorAmt())\nA_Tab.setValue(&quot;LineSalesWiTax&quot;, calcLine.getLineSalesWiTax())\nA_Tab.setValue(&quot;TaxAmt&quot;, calcLine.getTaxAmt())\nA_Tab.setValue(&quot;LineSalesWoTax&quot;, calcLine.getLineSalesWoTax())\nA_Tab.setValue(&quot;PriceDifference&quot;, calcLine.getPriceDifference())\nA_Tab.setValue(&quot;TransferredTaxAmt&quot;, calcLine.getTransferredTaxAmt())\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We then test this script with the following code:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>package rs.adempiere.test\n\nimport test.AdempiereTestCase\n\nimport groovy.lang.Binding\n\n/**\n * Parameters starts with A_ prefix\n *   A_WindowNo\n *   A_Tab\n *   A_Field\n *   A_Value\n *   A_OldValue\n *   A_Ctx \n */\n\npublic class CalloutPriceCalculationLineTest extends AdempiereTestCase {\n\tvoid testCallout() {\n\t\tDummyGridTab A_Tab\n\t\tA_Tab = new DummyGridTab()\n\t\tA_Tab.setValue(&quot;T_Qty&quot;, 10)\n\t\tA_Tab.setValue(&quot;PriceVendor&quot;, 5)\n\t\tA_Tab.setValue(&quot;SellingPrice&quot;, 8)\n\t\tA_Tab.setValue(&quot;C_Tax_ID&quot;, 104)\n\t\tA_Tab.setValue(&quot;LandAmt&quot;, 2)\n\t\t\n\t\tBinding binding = new Binding()\n\t\tbinding.setVariable(&quot;A_Tab&quot;, A_Tab)\n\t\tbinding.setVariable(&quot;A_Ctx&quot;, getCtx())\n\t\t\n\t\tdef shell = new GroovyShell(binding)\n\t\tshell.evaluate(new File(&#39;script/CallOutPriceCalculationLine.groovy&#39;))\n\t\t\n\t\tA_Tab = binding.getVariable(&quot;A_Tab&quot;)\n\t\t\n\t\tassert 50    == A_Tab.getValue(&quot;LineVendorAmt&quot;)\n\t\tassert 80    == A_Tab.getValue(&quot;LineSalesWiTax&quot;)  \n\t\tassert 12.20 == A_Tab.getValue(&quot;TaxAmt&quot;)\n\t\tassert 67.80 == A_Tab.getValue(&quot;LineSalesWoTax&quot;)\n\t\tassert 15.80 == A_Tab.getValue(&quot;PriceDifference&quot;)\n\t\tassert  9    == A_Tab.getValue(&quot;TransferredTaxAmt&quot;)\n\t}\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>File DummyGridTab.groovy:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>package rs.adempiere.test\n\npublic class DummyGridTab {\n    \tprivate mTable = [:]\n        \n\tpublic Object getValue (String columnName)\n\t{\n\t\tif (columnName == null)\n\t\t\treturn null\n\t\n\t\tdef field = mTable.get(columnName)\n\t\treturn field\n\t}   \n\n\tpublic String setValue (String columnName, value)\n\t{\n\t\tif (columnName == null)\n\t\t\treturn &quot;NoColumn&quot;\n\t\n\t\tmTable.put(columnName,  value)\n\t\treturn &quot;&quot;\n\t}\t\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Simillary we define process rule in Groovy:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>/**\n * Script Rule\n * \n * Search Key: groovy:PriceCalculationCreateFromInvoice\n * Name: PriceCalculationFromInvoice\n * Description: Process that creates PriceCalculation\n * \n * Comment/Help: \n * Create price calculation calling procedure MLSRPriceCalculation.createFrom(invoice)\n * \n * Event type: Process\n * Rule type: JSR 223 Scripting APIs\n */\n \nimport org.compiere.model.MInvoice\nimport rs.adempiere.model.MLSRPriceCalculation\nimport rs.adempiere.model.MLSRPriceCalculationLine\n\ncalc = new MLSRPriceCalculation(A_Ctx, A_Record_ID, A_TrxName)\ninvoice = new MInvoice(A_Ctx, calc.getC_Invoice_ID(), A_TrxName)\n \ncalc.copyFrom(invoice)\n \nresult = &quot;OK&quot;\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>and here is a test:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>package rs.adempiere.test\n\nimport rs.adempiere.model.MLSRPriceCalculation;\nimport test.AdempiereTestCase\n\nimport groovy.lang.Binding\nimport groovy.util.GroovyScriptEngine\n\n/**\n * Run JUnit test with arguments:\n * -Dtest=src/test/lsr/ProcessPriceCalculationCreateFromInvoiceTest.groovy\n */\npublic class ProcessPriceCalculationCreateFromInvoiceTest extends AdempiereTestCase {   \n    void testProcess() {\n        def newCalculation = new MLSRPriceCalculation(getCtx(), 0, getTrxName())\n        newCalculation.setC_BPartner_ID(114)\n        newCalculation.setC_Invoice_ID(1000000)\n        newCalculation.save()\n        \n        Binding binding = new Binding()\n        binding.setVariable(&quot;A_Ctx&quot;, getCtx())\n        binding.setVariable(&quot;A_Record_ID&quot;, newCalculation.get_ID())\n        binding.setVariable(&quot;A_TrxName&quot;, getTrxName())\n                \n        def shell = new GroovyShell(binding)\n        shell.evaluate(new File(&#39;script/PriceCalculationCreateFromInvoice.groovy&#39;))       \n        def calc = binding.getVariable(&quot;calc&quot;)\n        \n        def lines = calc.getLines()\n        assert 3 == lines.length                \n    }\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>We can also run tests from ant:</p><p>build.xml</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>...\n    &lt;path id=&quot;groovy.classpath&quot;&gt;\n        &lt;pathelement path=&quot;${groovy.path}&quot; /&gt;\n    &lt;/path&gt;\n\n    &lt;taskdef name=&quot;groovyc&quot;\n         classname=&quot;org.codehaus.groovy.ant.Groovyc&quot;\n         classpathref=&quot;groovy.classpath&quot;/&gt;\n...\n    &lt;target name=&quot;compile-groovy&quot; depends=&quot;compile&quot; description=&quot;Compiles all Groovy classes.&quot;&gt;\n        &lt;groovyc srcdir=&quot;${src}&quot; destdir=&quot;${build.dir}&quot;&gt;\n            &lt;classpath&gt;\n                &lt;pathelement path=&quot;${build.dir}&quot;/&gt;\n              &lt;path refid=&quot;project.class.path&quot;/&gt;\n            &lt;/classpath&gt;\n         &lt;/groovyc&gt;\n    &lt;/target&gt;    \n...\n\t&lt;target name=&quot;test&quot;&gt;\n\t\t&lt;junit printsummary=&quot;yes&quot; fork=&quot;yes&quot; haltonfailure=&quot;no&quot; showoutput=&quot;no&quot;&gt;\n              &lt;classpath&gt;\n                      &lt;pathelement path=&quot;${build.dir}&quot;/&gt;\n                      &lt;pathelement path=&quot;${groovy.path}&quot;/&gt;\n                      &lt;path refid=&quot;project.class.path&quot;/&gt;\n              &lt;/classpath&gt;\t\t\t\t\t\n\t        &lt;formatter type=&quot;plain&quot;/&gt;\n\t\t\t&lt;test name=&quot;rs.adempiere.test.MPriceCalculationTest&quot;/&gt;\n\t\t\t&lt;test name=&quot;rs.adempiere.test.CalloutPriceCalculationLineTest&quot;/&gt;\n\t\t&lt;/junit&gt;\t\t\n\t&lt;/target&gt;\n...\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="see-also" tabindex="-1"><a class="header-anchor" href="#see-also" aria-hidden="true">#</a> See Also</h2>',15),r={href:"https://wiki.adempiere.net/Script_Callout",target:"_blank",rel:"noopener noreferrer"},s={href:"https://wiki.adempiere.net/Script_Process",target:"_blank",rel:"noopener noreferrer"},d={href:"https://wiki.adempiere.net/Callout",target:"_blank",rel:"noopener noreferrer"},o=(0,t.QD)("li",null,[(0,t.QD)("a",{href:"a"},"Adempiere Junit test")],-1),c={},u=(0,n(42272).c)(c,[["render",function(e,i){const n=(0,t.E1)("ExternalLinkIcon");return(0,t.Wz)(),(0,t.An)("div",null,[(0,t.QD)("p",null,[(0,t.mY)("Here is another implementation of JSR223 Callout Scripting done in Groovy contributed by "),(0,t.QD)("a",l,[(0,t.mY)("Milos Tijanic"),(0,t.K2)(n)]),(0,t.mY)(" of SERBIA. They are based on the Price calculation from Serbian localization project.")]),a,(0,t.QD)("ul",null,[(0,t.QD)("li",null,[(0,t.QD)("a",r,[(0,t.mY)("Script_Callout"),(0,t.K2)(n)])]),(0,t.QD)("li",null,[(0,t.QD)("a",s,[(0,t.mY)("Script Process"),(0,t.K2)(n)])]),(0,t.QD)("li",null,[(0,t.QD)("a",d,[(0,t.mY)("Callout"),(0,t.K2)(n)])]),o])])}]])},67232:(e,i,n)=>{n.r(i),n.d(i,{data:()=>t});const t=JSON.parse('{"key":"v-4704b66e","path":"/community/wiki/developers-guide/example-groovy-callout.html","title":"Introduction to ZK WebUI","lang":"en-US","frontmatter":{"title":"Introduction to ZK WebUI","category":"Community","star":9,"sticky":9,"tag":["Wiki","Developer\'s Guide"],"article":false,"description":"Here is another implementation of JSR223 Callout Scripting done in Groovy contributed by Milos Tijanic of SERBIA. They are based on the Price calculation from Serbian localization project. Price Calculation is a mandatory document in Serbia for receiving goods. It must display landing cost allocation per product, VAT amount, rate, price margin, vendor price and our price in tabular format.","head":[["meta",{"property":"og:url","content":"https://github.com/adempiere/adempiere-site.github.io/community/wiki/developers-guide/example-groovy-callout.html"}],["meta",{"property":"og:title","content":"Introduction to ZK WebUI"}],["meta",{"property":"og:description","content":"Here is another implementation of JSR223 Callout Scripting done in Groovy contributed by Milos Tijanic of SERBIA. They are based on the Price calculation from Serbian localization project. Price Calculation is a mandatory document in Serbia for receiving goods. It must display landing cost allocation per product, VAT amount, rate, price margin, vendor price and our price in tabular format."}],["meta",{"property":"og:type","content":"website"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-08-25T14:41:16.000Z"}],["meta",{"property":"article:author","content":"ADempiere"}],["meta",{"property":"article:tag","content":"Wiki"}],["meta",{"property":"article:tag","content":"Developer\'s Guide"}],["meta",{"property":"article:modified_time","content":"2023-08-25T14:41:16.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"WebPage\\",\\"name\\":\\"Introduction to ZK WebUI\\",\\"description\\":\\"Here is another implementation of JSR223 Callout Scripting done in Groovy contributed by Milos Tijanic of SERBIA. They are based on the Price calculation from Serbian localization project. Price Calculation is a mandatory document in Serbia for receiving goods. It must display landing cost allocation per product, VAT amount, rate, price margin, vendor price and our price in tabular format.\\"}"],["link",{"rel":"alternate","type":"application/atom+xml","href":"https://github.com/adempiere/adempiere-site.github.io/atom.xml","title":" Atom Feed"}],["link",{"rel":"alternate","type":"application/json","href":"https://github.com/adempiere/adempiere-site.github.io/feed.json","title":" JSON Feed"}],["link",{"rel":"alternate","type":"application/rss+xml","href":"https://github.com/adempiere/adempiere-site.github.io/rss.xml","title":" RSS Feed"}]]},"headers":[{"level":2,"title":"See Also","slug":"see-also","link":"#see-also","children":[]}],"git":{"createdTime":1692974476000,"updatedTime":1692974476000,"contributors":[{"name":"Jesús Albujas","email":"134967453+tecnicoerp@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":1.86,"words":558},"filePathRelative":"community/wiki/developers-guide/example-groovy-callout.md","localizedDate":"August 25, 2023","excerpt":"<p>Here is another implementation of JSR223 Callout Scripting done in Groovy contributed by <a href=\\"https://wiki.adempiere.net/User:Milos_t\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Milos Tijanic</a> of SERBIA. They are based on the Price calculation from Serbian localization project.</p>\\n<p>Price Calculation is a mandatory document in Serbia for receiving goods. It must display landing cost allocation per product, VAT amount, rate, price margin, vendor price and our price in tabular format.</p>","autoDesc":true}')}}]);